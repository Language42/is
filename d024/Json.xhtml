<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="https://l42.is/css/style.css" media="all"/>
    <script src="https://l42.is/js/ace.js"></script>
    <script src="https://l42.is/js/utils.js"></script>
    <link rel="shortcut icon" href="https://l42.is/css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='https://l42.is/css/logoBlue.png' alt='42' width='120' height='120'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

<div class="index"><div class="wrapFloat"><div class="inFloat">
<div class="rotate90"> Index of Content</div>
</div><div class="inFloat">
<ol>
 <li><a href="#Json"> Json </a></li>
</ol>
</div></div><div class="finishFloat"></div></div>

</p><p id="Json">
</p><div style="break-after:page"></div><h1> Json </h1> <p>
</p><h2> Importing Json and example usage </h2> <p>

The Json module allows for creation and handling of Json objects. 
The standard datatypes are supported. Result is immutable
<pre class="l42Big"><![CDATA[
reuse [L42.is/AdamsTowel]
Json = Load:{reuse[L42.is/Json]}
Main=(
  Json.Value v=Json"""
    |[{ "a":1, "b":true, "c":["Hello","World"]}]
    """
  Debug(v)
  )
]]></pre>

</p><h2> Overview under AdamsTowel </h2> <p>

<pre class="l42BigFolded"><![CDATA[
#apply(string)                     @Public class method Value #apply(S string)=(..)
#from(stringLiteral)               @Public class method Value #from(S.StringBuilder stringLiteral)=(..)
@Public Array={
  [Value, HasToS]
  //class methods:
  #apply()                           class method mut This #apply()=(..)
  #apply(capacity)                   class method mut This #apply(I capacity)native{..}=(..)
  #apply(squareBuilder)              class method mut This #apply(mut This squareBuilder)=(..)
  #shortCircutSquare()               class method Bool #shortCircutSquare()=(..)
  #squareBuilder()                   class method mut This #squareBuilder()=(..)
  equals(a, b)                       class method Bool equals(read Value a, read Value b)=(..)
  //imm methods:
  #bangequal0(that)                  @{
    Predicate
    Delegates to 'System.immEquality'.
    Look at 'allEq' for more flexible equivalence checks.
    }method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 @{
    Predicate
    Delegates to 'System.immEquality'.
    Look at 'allEq' for more flexible equivalence checks.
    }method Bool #equalequal0(This that)=(..)
  #minus0(right)                     @{
    Wither
    Returns the receiver but without all the elements equal to 'right'
    }method This #minus0(Value right)=(..)
  #minusminus0(right)                @{
    Wither
    Returns the receiver but without all the elements contained in the list 'right'
    }method This #minusminus0(This right)=(..)
  #plus0(right)                      method This #plus0(Value right)=(..)
  #plus1(left)                       method This #plus1(Value left)=(..)
  #plusplus0(right)                  method This #plusplus0(This right)=(..)
  immNorm()                          method This immNorm()=(..)
  with(left)                         method This with(Value left)=(..)
  with(right)                        method This with(Value right)=(..)
  with(that, val)                    method This with(I that, Value val)=(..)
  withAlso(left)                     method This withAlso(Value left)=(..)
  withAlso(right)                    method This withAlso(Value right)=(..)
  withAlso(that, val)                method This withAlso(I that, Value val)=(..)
  without(left)                      @{
    Wither
    Returns the receiver but without the leftmost element equal to 'val'
    }method This without(read Value left)=(..)
  without(right)                     @{
    Wither
    Returns the receiver but without the rightmost element equal to 'val'
    }method This without(read Value right)=(..)
  without(that)                      method This without(I that)=(..)
  withoutAll(val)                    @{
    Wither
    Returns the receiver but without all the elements equal to 'val'
    }method This withoutAll(read Value val)=(..)
  withoutLeft()                      method This withoutLeft()=(..)
  withoutRight()                     method This withoutRight()=(..)
  //read methods:
  #elem#default(that)                read method Value #elem#default(I that)=(..)
  #elem#imm(that)                    read method Value #elem#imm(I that)=(..)
  #elem#read(that)                   read method read Value #elem#read(I that)=(..)
  #hasElem(that)                     read method Collection.IteratorCompose #hasElem(I that)=(..)
  #in1(that)                         @{
    Predicate
    True if the element is contained in the List.
    }read method Bool #in1(read Value that)=(..)
  #iterator()                        read method read This #iterator()=(..)
  #startIndex()                      read method I #startIndex()=(..)
  allEq(that)                        @{
    Predicate
    returns true if all the elements in 'this' are individually 
    This.equals(a,b) to the corresponding element in 'that'.
    This can be different from '==' or 'readEquality': they just use system equality.
    If the elements have a 'readEquality' method, that is used
    On default This.equals(a,b) will use an available equality predicate visible on the element; 
    prioritizing in the following order:
    'allEq', 'readEquality' and '=='.
    If none is present, 'System.immEquality' is used instead.
    }read method Bool allEq(read This that)=(..)
  clone()                            read method capsule This clone()=(..)
  contains(that)                     @{
    Predicate
    True if the element is contained in the List.
    }read method Bool contains(read Value that)=(..)
  indexOf(left)                      @{
    Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
    The result is the index of the leftmost occurrence
    of 'left' in the list according to 'This.equals(a,b)'
    }read method I indexOf(read Value left)=(..)
  indexOf(right)                     @{
    Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
    The result is the index of the rightmost occurrence
    of 'right' in the list according to 'This.equals(a,b)'
    }read method I indexOf(read Value right)=(..)
  isEmpty()                          read method Bool isEmpty()native{..}=(..)
  isMutVal(that)                     read method Bool isMutVal(I that)native{..}=(..)
  left()                             read method Value left()=(..)
  readEquality(that)                 @{
    Predicate
    Delegates to 'System.immEquality'.
    Look at 'allEq' for more flexible equivalence checks.
    }read method Bool readEquality(read This that)=(..)
  readLeft()                         read method read Value readLeft()=(..)
  readRight()                        read method read Value readRight()=(..)
  readVal(that)                      read method read Value readVal(I that)native{..}=(..)
  right()                            read method Value right()=(..)
  size()                             read method I size()native{..}=(..)
  toS()                              read method S toS()=(..)
  val(that)                          read method Value val(I that)native{..}=(..)
  vals()                             read method read This vals()=(..)
  vals(that)                         read method read Iterator vals(I that)=(..)
  vals(that, to)                     read method read Iterator vals(I that, I to)=(..)
  vals(to)                           read method read Iterator vals(I to)=(..)
  //mut methods:
  #add(left)                         mut method Void #add(mut Value left)=(..)
  #add(right)                        mut method Void #add(mut Value right)=(..)
  #add(that)                         mut method Void #add(mut Value that)=(..)
  #add(that, val)                    mut method Void #add(I that, mut Value val)native{..}=(..)
  #apply(that)                       mut method mut This #apply(Void that)=(..)
  #elem#mut(that)                    mut method mut Value #elem#mut(I that)=(..)
  #left()                            mut method mut Value #left()=(..)
  #left(that)                        mut method Void #left(mut Value that)=(..)
  #right()                           mut method mut Value #right()=(..)
  #right(that)                       mut method Void #right(mut Value that)=(..)
  #set(that, val)                    mut method Void #set(I that, mut Value val)native{..}=(..)
  #squareAdd(mutVal)                 mut method Void #squareAdd(mut Value mutVal)=(..)
  #squareAdd(that)                   mut method Void #squareAdd(Value that)=(..)
  #update#default(that, val)         mut method Value #update#default(I that, Value val)=(..)
  #update#imm(that, val)             mut method Value #update#imm(I that, Value val)=(..)
  #update#mut(that, val)             mut method mut Value #update#mut(I that, mut Value val)=(..)
  #val(that)                         mut method mut Value #val(I that)native{..}=(..)
  #vals()                            mut method mut This #vals()=(..)
  #vals(that)                        mut method mut Iterator #vals(I that)=(..)
  #vals(that, to)                    mut method mut Iterator #vals(I that, I to)=(..)
  #vals(to)                          mut method mut Iterator #vals(I to)=(..)
  #varIterator()                     mut method mut This #varIterator()=(..)
  add(left)                          mut method Void add(Value left)=(..)
  add(right)                         mut method Void add(Value right)=(..)
  add(that)                          mut method Void add(Value that)=(..)
  add(that, val)                     mut method Void add(I that, Value val)native{..}=(..)
  clear()                            mut method Void clear()=(..)
  left(that)                         mut method Void left(Value that)=(..)
  remove(left)                       @{
    Mutator 
    Removes from the list the leftmost element equal to 'left'.
    It relies on 'This.equals(a,b)' through 'this.indexOf(left)'  
    }mut method Void remove(read Value left)=(..)
  remove(right)                      @{
    Mutator 
    Removes from the list the rightmost element equal to 'right'.
    It relies on 'This.equals(a,b)' through 'this.indexOf(right)'  
    }mut method Void remove(read Value right)=(..)
  remove(that)                       mut method Void remove(I that)native{..}=(..)
  removeAll(val)                     @{
    Mutator 
    Removes from the list all the elements equal to 'val'.
    It relies on 'This.equals(a,b)'  
    }mut method Void removeAll(read Value val)=(..)
  removeLeft()                       mut method Void removeLeft()=(..)
  removeRight()                      mut method Void removeRight()=(..)
  right(that)                        mut method Void right(Value that)=(..)
  set(that, val)                     mut method Void set(I that, Value val)native{..}=(..)
  Iterator={
    //class methods:
    #apply(start, end, list)           class method mut This #apply(I start, I end, fwd mut This1 list)=(..)
    //read methods:
    #elem#default(that)                read method Value #elem#default(I that)=(..)
    #elem#imm(that)                    read method Value #elem#imm(I that)=(..)
    #elem#read(that)                   read method read Value #elem#read(I that)=(..)
    #hasElem(that)                     read method Collection.IteratorCompose #hasElem(I that)=(..)
    #iterator()                        read method read This #iterator()=(..)
    #startIndex()                      read method I #startIndex()=(..)
    end()                              read method I end()=(..)
    list()                             read method read This1 list()=(..)
    start()                            read method I start()=(..)
    //mut methods:
    #elem#mut(that)                    mut method mut Value #elem#mut(I that)=(..)
    #list()                            mut method mut This1 #list()=(..)
    #update#default(that, val)         mut method Value #update#default(I that, Value val)=(..)
    #update#imm(that, val)             mut method Value #update#imm(I that, Value val)=(..)
    #update#mut(that, val)             mut method mut Value #update#mut(I that, mut Value val)=(..)
    #varIterator()                     mut method mut This #varIterator()=(..)
    }
  }
@Public Bool={
  interface[HasToS, Value]
  //imm methods:
  #bangequal0(that)                  method Bool #bangequal0(This that)
  #equalequal0(that)                 method Bool #equalequal0(This that)
  //read methods:
  immClone()                         read method This immClone()
  readEquality(that)                 read method Bool readEquality(read This that)
  toS()                              read method S toS()
  False={
    [This1, HasToS, Value]
    //class methods:
    #apply()                           class method This #apply()=(..)
    //imm methods:
    #bangequal0(that)                  method Bool #bangequal0(This1 that)=(..)
    #equalequal0(that)                 method Bool #equalequal0(This1 that)=(..)
    //read methods:
    immClone()                         read method This immClone()=(..)
    readEquality(that)                 read method Bool readEquality(read This1 that)=(..)
    toS()                              read method S toS()=(..)
    }
  List={
    [HasToS]
    //class methods:
    #apply()                           class method mut This #apply()=(..)
    #apply(capacity)                   class method mut This #apply(I capacity)native{..}=(..)
    #apply(squareBuilder)              class method mut This #apply(mut This squareBuilder)=(..)
    #shortCircutSquare()               class method Bool #shortCircutSquare()=(..)
    #squareBuilder()                   class method mut This #squareBuilder()=(..)
    equals(a, b)                       class method Bool equals(read This1 a, read This1 b)=(..)
    //imm methods:
    #bangequal0(that)                  @{
      Predicate
      Delegates to 'System.immEquality'.
      Look at 'allEq' for more flexible equivalence checks.
      }method Bool #bangequal0(This that)=(..)
    #equalequal0(that)                 @{
      Predicate
      Delegates to 'System.immEquality'.
      Look at 'allEq' for more flexible equivalence checks.
      }method Bool #equalequal0(This that)=(..)
    #minus0(right)                     @{
      Wither
      Returns the receiver but without all the elements equal to 'right'
      }method This #minus0(This1 right)=(..)
    #minusminus0(right)                @{
      Wither
      Returns the receiver but without all the elements contained in the list 'right'
      }method This #minusminus0(This right)=(..)
    #plus0(right)                      method This #plus0(This1 right)=(..)
    #plus1(left)                       method This #plus1(This1 left)=(..)
    #plusplus0(right)                  method This #plusplus0(This right)=(..)
    immNorm()                          method This immNorm()=(..)
    with(left)                         method This with(This1 left)=(..)
    with(right)                        method This with(This1 right)=(..)
    with(that, val)                    method This with(I that, This1 val)=(..)
    withAlso(left)                     method This withAlso(This1 left)=(..)
    withAlso(right)                    method This withAlso(This1 right)=(..)
    withAlso(that, val)                method This withAlso(I that, This1 val)=(..)
    without(left)                      @{
      Wither
      Returns the receiver but without the leftmost element equal to 'val'
      }method This without(read This1 left)=(..)
    without(right)                     @{
      Wither
      Returns the receiver but without the rightmost element equal to 'val'
      }method This without(read This1 right)=(..)
    without(that)                      method This without(I that)=(..)
    withoutAll(val)                    @{
      Wither
      Returns the receiver but without all the elements equal to 'val'
      }method This withoutAll(read This1 val)=(..)
    withoutLeft()                      method This withoutLeft()=(..)
    withoutRight()                     method This withoutRight()=(..)
    //read methods:
    #elem#default(that)                read method This1 #elem#default(I that)=(..)
    #elem#imm(that)                    read method This1 #elem#imm(I that)=(..)
    #elem#read(that)                   read method read This1 #elem#read(I that)=(..)
    #hasElem(that)                     read method Collection.IteratorCompose #hasElem(I that)=(..)
    #in1(that)                         @{
      Predicate
      True if the element is contained in the List.
      }read method Bool #in1(read This1 that)=(..)
    #iterator()                        read method read This #iterator()=(..)
    #startIndex()                      read method I #startIndex()=(..)
    allEq(that)                        @{
      Predicate
      returns true if all the elements in 'this' are individually 
      This.equals(a,b) to the corresponding element in 'that'.
      This can be different from '==' or 'readEquality': they just use system equality.
      If the elements have a 'readEquality' method, that is used
      On default This.equals(a,b) will use an available equality predicate visible on the element; 
      prioritizing in the following order:
      'allEq', 'readEquality' and '=='.
      If none is present, 'System.immEquality' is used instead.
      }read method Bool allEq(read This that)=(..)
    clone()                            read method capsule This clone()=(..)
    contains(that)                     @{
      Predicate
      True if the element is contained in the List.
      }read method Bool contains(read This1 that)=(..)
    indexOf(left)                      @{
      Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
      The result is the index of the leftmost occurrence
      of 'left' in the list according to 'This.equals(a,b)'
      }read method I indexOf(read This1 left)=(..)
    indexOf(right)                     @{
      Old fashion indexOf returning 0..size-1 or -1 to indicate absence. 
      The result is the index of the rightmost occurrence
      of 'right' in the list according to 'This.equals(a,b)'
      }read method I indexOf(read This1 right)=(..)
    isEmpty()                          read method Bool isEmpty()native{..}=(..)
    isMutVal(that)                     read method Bool isMutVal(I that)native{..}=(..)
    left()                             read method This1 left()=(..)
    readEquality(that)                 @{
      Predicate
      Delegates to 'System.immEquality'.
      Look at 'allEq' for more flexible equivalence checks.
      }read method Bool readEquality(read This that)=(..)
    readLeft()                         read method read This1 readLeft()=(..)
    readRight()                        read method read This1 readRight()=(..)
    readVal(that)                      read method read This1 readVal(I that)native{..}=(..)
    right()                            read method This1 right()=(..)
    size()                             read method I size()native{..}=(..)
    toS()                              read method S toS()=(..)
    val(that)                          read method This1 val(I that)native{..}=(..)
    vals()                             read method read This vals()=(..)
    vals(that)                         read method read Iterator vals(I that)=(..)
    vals(that, to)                     read method read Iterator vals(I that, I to)=(..)
    vals(to)                           read method read Iterator vals(I to)=(..)
    //mut methods:
    #add(left)                         mut method Void #add(mut This1 left)=(..)
    #add(right)                        mut method Void #add(mut This1 right)=(..)
    #add(that)                         mut method Void #add(mut This1 that)=(..)
    #add(that, val)                    mut method Void #add(I that, mut This1 val)native{..}=(..)
    #apply(that)                       mut method mut This #apply(Void that)=(..)
    #elem#mut(that)                    mut method mut This1 #elem#mut(I that)=(..)
    #left()                            mut method mut This1 #left()=(..)
    #left(that)                        mut method Void #left(mut This1 that)=(..)
    #right()                           mut method mut This1 #right()=(..)
    #right(that)                       mut method Void #right(mut This1 that)=(..)
    #set(that, val)                    mut method Void #set(I that, mut This1 val)native{..}=(..)
    #squareAdd(mutVal)                 mut method Void #squareAdd(mut This1 mutVal)=(..)
    #squareAdd(that)                   mut method Void #squareAdd(This1 that)=(..)
    #update#default(that, val)         mut method This1 #update#default(I that, This1 val)=(..)
    #update#imm(that, val)             mut method This1 #update#imm(I that, This1 val)=(..)
    #update#mut(that, val)             mut method mut This1 #update#mut(I that, mut This1 val)=(..)
    #val(that)                         mut method mut This1 #val(I that)native{..}=(..)
    #vals()                            mut method mut This #vals()=(..)
    #vals(that)                        mut method mut Iterator #vals(I that)=(..)
    #vals(that, to)                    mut method mut Iterator #vals(I that, I to)=(..)
    #vals(to)                          mut method mut Iterator #vals(I to)=(..)
    #varIterator()                     mut method mut This #varIterator()=(..)
    add(left)                          mut method Void add(This1 left)=(..)
    add(right)                         mut method Void add(This1 right)=(..)
    add(that)                          mut method Void add(This1 that)=(..)
    add(that, val)                     mut method Void add(I that, This1 val)native{..}=(..)
    clear()                            mut method Void clear()=(..)
    left(that)                         mut method Void left(This1 that)=(..)
    remove(left)                       @{
      Mutator 
      Removes from the list the leftmost element equal to 'left'.
      It relies on 'This.equals(a,b)' through 'this.indexOf(left)'  
      }mut method Void remove(read This1 left)=(..)
    remove(right)                      @{
      Mutator 
      Removes from the list the rightmost element equal to 'right'.
      It relies on 'This.equals(a,b)' through 'this.indexOf(right)'  
      }mut method Void remove(read This1 right)=(..)
    remove(that)                       mut method Void remove(I that)native{..}=(..)
    removeAll(val)                     @{
      Mutator 
      Removes from the list all the elements equal to 'val'.
      It relies on 'This.equals(a,b)'  
      }mut method Void removeAll(read This1 val)=(..)
    removeLeft()                       mut method Void removeLeft()=(..)
    removeRight()                      mut method Void removeRight()=(..)
    right(that)                        mut method Void right(This1 that)=(..)
    set(that, val)                     mut method Void set(I that, This1 val)native{..}=(..)
    Iterator={
      //class methods:
      #apply(start, end, list)           class method mut This #apply(I start, I end, fwd mut This1 list)=(..)
      //read methods:
      #elem#default(that)                read method This2 #elem#default(I that)=(..)
      #elem#imm(that)                    read method This2 #elem#imm(I that)=(..)
      #elem#read(that)                   read method read This2 #elem#read(I that)=(..)
      #hasElem(that)                     read method Collection.IteratorCompose #hasElem(I that)=(..)
      #iterator()                        read method read This #iterator()=(..)
      #startIndex()                      read method I #startIndex()=(..)
      end()                              read method I end()=(..)
      list()                             read method read This1 list()=(..)
      start()                            read method I start()=(..)
      //mut methods:
      #elem#mut(that)                    mut method mut This2 #elem#mut(I that)=(..)
      #list()                            mut method mut This1 #list()=(..)
      #update#default(that, val)         mut method This2 #update#default(I that, This2 val)=(..)
      #update#imm(that, val)             mut method This2 #update#imm(I that, This2 val)=(..)
      #update#mut(that, val)             mut method mut This2 #update#mut(I that, mut This2 val)=(..)
      #varIterator()                     mut method mut This #varIterator()=(..)
      }
    }
  Map={
    [HasToS]
    //class methods:
    #apply()                           @Public class method mut This #apply()=(..)
    #apply(squareBuilder)              @Public class method mut This #apply(mut This squareBuilder)=(..)
    #shortCircutSquare()               @Public class method Bool #shortCircutSquare()=(..)
    #squareBuilder()                   @Public class method mut This #squareBuilder()=(..)
    empty()                            @Public class method mut This empty()=(..)
    //imm methods:
    #bangequal0(that)                  @Public method Bool #bangequal0(This that)=(..)
    #equalequal0(that)                 @Public method Bool #equalequal0(This that)=(..)
    immNorm()                          @Public method This immNorm()=(..)
    //read methods:
    #elem#default(that)                @Public read method Entry #elem#default(I that)=(..)
    #elem#imm(that)                    @Public read method Entry #elem#imm(I that)=(..)
    #elem#read(that)                   @Public read method read Entry #elem#read(I that)=(..)
    #hasElem(that)                     @Public read method Collection.IteratorCompose #hasElem(I that)=(..)
    #iterator()                        @Public read method read This #iterator()=(..)
    #startIndex()                      @Public read method I #startIndex()=(..)
    entry(that)                        @Public read method read Entry entry(I that)=(..)
    immEntry(that)                     @Public read method Entry immEntry(I that)=(..)
    isEmpty()                          @Public read method Bool isEmpty()=(..)
    isMutVal(that)                     @Public read method Bool isMutVal(I that)=(..)
    key(that)                          @Public read method S key(I that)=(..)
    readEquality(that)                 @Public read method Bool readEquality(read This that)=(..)
    readVal(key)                       @Public read method read OVal readVal(S key)=(..)
    readVal(that)                      @Public read method read This1 readVal(I that)=(..)
    size()                             @Public read method I size()=(..)
    toS()                              @Public read method S toS()=(..)
    val(key)                           @Public read method OVal val(S key)=(..)
    val(that)                          @Public read method This1 val(I that)=(..)
    vals()                             @Public read method read This vals()=(..)
    //mut methods:
    #apply(that)                       @Public mut method mut This #apply(Void that)=(..)
    #elem#mut(that)                    @Public mut method mut Entry #elem#mut(I that)=(..)
    #entry(that)                       @Public mut method mut Entry #entry(I that)=(..)
    #put(key, val)                     @Public mut method Void #put(S key, mut This1 val)=(..)
    #squareAdd(key, mutVal)            @Public mut method Void #squareAdd(S key, mut This1 mutVal)=(..)
    #squareAdd(key, val)               @Public mut method Void #squareAdd(S key, This1 val)=(..)
    #val(key)                          @Public mut method mut OVal #val(S key)=(..)
    #val(that)                         @Public mut method mut This1 #val(I that)=(..)
    #vals()                            @Public mut method mut This #vals()=(..)
    #varIterator()                     @Public mut method mut This #varIterator()=(..)
    put(key, val)                      @Public mut method Void put(S key, This1 val)=(..)
    remove(key)                        @Public mut method Void remove(S key)=(..)
    @Public Entry={
      [HasToS]
      //class methods:
      #apply(key, val)                   class method mut This #apply(fwd imm S key, fwd mut This2 val)=(..)
      #immK(key, val)                    class method This #immK(S key, This2 val)=(..)
      readEntry(key, val)                class method read This readEntry(S key, read This2 val)=(..)
      //imm methods:
      #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
      #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
      norm()                             method This norm()=(..)
      with(key)                          method This with(S key)=(..)
      with(val)                          method This with(This2 val)=(..)
      //read methods:
      immClone()                         read method This immClone()=(..)
      key()                              read method S key()=(..)
      readEquality(that)                 read method Bool readEquality(read This that)=(..)
      toS()                              read method S toS()=(..)
      val()                              read method read This2 val()=(..)
      //mut methods:
      #val()                             mut method mut This2 #val()=(..)
      capsuleClone()                     mut method capsule This capsuleClone()=(..)
      }
    @Public OVal={
      [HasToS]
      //class methods:
      #apply()                           class method mut This #apply()=(..)
      #apply(that)                       class method mut This #apply(fwd mut This2 that)native{..}=(..)
      equals(a, b)                       class method Bool equals(read This2 a, read This2 b)=(..)
      //imm methods:
      #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
      #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
      //read methods:
      #bang0()                           read method Bool #bang0()=(..)
      #if()                              read method Bool #if()native{..}=(..)
      #in1(that)                         read method Bool #in1(read This2 that)=(..)
      allEq(that)                        read method Bool allEq(read This that)=(..)
      contains(that)                     read method Bool contains(read This2 that)=(..)
      isPresent()                        read method Bool isPresent()=(..)
      readEquality(that)                 read method Bool readEquality(read This that)=(..)
      toS()                              read method S toS()=(..)
      val()                              read method read This2 val()native{..}=(..)
      val(orElse)                        read method read This2 val(read This2 orElse)=(..)
      //mut methods:
      #val()                             mut method mut This2 #val()native{..}=(..)
      #val(orElse)                       mut method mut This2 #val(mut This2 orElse)=(..)
      }
    }
  True={
    [This1, HasToS, Value]
    //class methods:
    #apply()                           class method This #apply()=(..)
    //imm methods:
    #bangequal0(that)                  method Bool #bangequal0(This1 that)=(..)
    #equalequal0(that)                 method Bool #equalequal0(This1 that)=(..)
    //read methods:
    immClone()                         read method This immClone()=(..)
    readEquality(that)                 read method Bool readEquality(read This1 that)=(..)
    toS()                              read method S toS()=(..)
    }
  Vals={
    [HasToS]
    //class methods:
    #apply()                           @Cache.Lazy class method List #apply()native{..}=(..)
    #apply(that)                       class method This1 #apply(S that)=(..)
    #immK()                            class method This #immK()=(..)
    map()                              @Cache.Lazy class method Map map()native{..}=(..)
    //imm methods:
    #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
    #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
    norm()                             method This norm()=(..)
    //read methods:
    immClone()                         read method This immClone()=(..)
    readEquality(that)                 read method Bool readEquality(read This that)=(..)
    toS()                              read method S toS()=(..)
    //mut methods:
    capsuleClone()                     mut method capsule This capsuleClone()=(..)
    }
  }
@Public Null={
  [HasToS, Value]
  //class methods:
  #apply()                           class method This #apply()=(..)
  #immK()                            class method This #immK()=(..)
  //imm methods:
  #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
  norm()                             method This norm()=(..)
  //read methods:
  immClone()                         read method This immClone()=(..)
  readEquality(that)                 read method Bool readEquality(read This that)=(..)
  toS()                              read method S toS()=(..)
  //mut methods:
  capsuleClone()                     mut method capsule This capsuleClone()=(..)
  }
@Public Number={
  [HasToS, Value]
  //class methods:
  #apply(string)                     class method This #apply(S string)=(..)
  #apply(that)                       class method This #apply(S that)=(..)
  #from(stringLiteral)               @Cache.Call class method This #from(S.StringBuilder stringLiteral)=(..)
  #immK(that)                        class method This #immK(S that)=(..)
  //imm methods:
  #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
  norm()                             method This norm()=(..)
  with(that)                         method This with(S that)=(..)
  //read methods:
  immClone()                         read method This immClone()=(..)
  readEquality(that)                 read method Bool readEquality(read This that)=(..)
  that()                             read method S that()=(..)
  toS()                              read method S toS()=(..)
  //mut methods:
  capsuleClone()                     mut method capsule This capsuleClone()=(..)
  }
@Public Object={
  [Value, HasToS]
  //class methods:
  #apply()                           @Public class method mut This #apply()=(..)
  #apply(squareBuilder)              @Public class method mut This #apply(mut This squareBuilder)=(..)
  #shortCircutSquare()               @Public class method Bool #shortCircutSquare()=(..)
  #squareBuilder()                   @Public class method mut This #squareBuilder()=(..)
  empty()                            @Public class method mut This empty()=(..)
  //imm methods:
  #bangequal0(that)                  @Public method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 @Public method Bool #equalequal0(This that)=(..)
  immNorm()                          @Public method This immNorm()=(..)
  //read methods:
  #elem#default(that)                @Public read method Entry #elem#default(I that)=(..)
  #elem#imm(that)                    @Public read method Entry #elem#imm(I that)=(..)
  #elem#read(that)                   @Public read method read Entry #elem#read(I that)=(..)
  #hasElem(that)                     @Public read method Collection.IteratorCompose #hasElem(I that)=(..)
  #iterator()                        @Public read method read This #iterator()=(..)
  #startIndex()                      @Public read method I #startIndex()=(..)
  entry(that)                        @Public read method read Entry entry(I that)=(..)
  immEntry(that)                     @Public read method Entry immEntry(I that)=(..)
  isEmpty()                          @Public read method Bool isEmpty()=(..)
  isMutVal(that)                     @Public read method Bool isMutVal(I that)=(..)
  key(that)                          @Public read method String key(I that)=(..)
  readEquality(that)                 @Public read method Bool readEquality(read This that)=(..)
  readVal(key)                       @Public read method read OVal readVal(String key)=(..)
  readVal(that)                      @Public read method read Value readVal(I that)=(..)
  size()                             @Public read method I size()=(..)
  toS()                              @Public read method S toS()=(..)
  val(key)                           @Public read method OVal val(String key)=(..)
  val(that)                          @Public read method Value val(I that)=(..)
  vals()                             @Public read method read This vals()=(..)
  //mut methods:
  #apply(that)                       @Public mut method mut This #apply(Void that)=(..)
  #elem#mut(that)                    @Public mut method mut Entry #elem#mut(I that)=(..)
  #entry(that)                       @Public mut method mut Entry #entry(I that)=(..)
  #put(key, val)                     @Public mut method Void #put(String key, mut Value val)=(..)
  #squareAdd(key, mutVal)            @Public mut method Void #squareAdd(String key, mut Value mutVal)=(..)
  #squareAdd(key, val)               @Public mut method Void #squareAdd(String key, Value val)=(..)
  #val(key)                          @Public mut method mut OVal #val(String key)=(..)
  #val(that)                         @Public mut method mut Value #val(I that)=(..)
  #vals()                            @Public mut method mut This #vals()=(..)
  #varIterator()                     @Public mut method mut This #varIterator()=(..)
  put(key, val)                      @Public mut method Void put(String key, Value val)=(..)
  remove(key)                        @Public mut method Void remove(String key)=(..)
  @Public Entry={
    [HasToS]
    //class methods:
    #apply(key, val)                   class method mut This #apply(fwd imm String key, fwd mut Value val)=(..)
    #immK(key, val)                    class method This #immK(String key, Value val)=(..)
    readEntry(key, val)                class method read This readEntry(String key, read Value val)=(..)
    //imm methods:
    #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
    #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
    norm()                             method This norm()=(..)
    with(key)                          method This with(String key)=(..)
    with(val)                          method This with(Value val)=(..)
    //read methods:
    immClone()                         read method This immClone()=(..)
    key()                              read method String key()=(..)
    readEquality(that)                 read method Bool readEquality(read This that)=(..)
    toS()                              read method S toS()=(..)
    val()                              read method read Value val()=(..)
    //mut methods:
    #val()                             mut method mut Value #val()=(..)
    capsuleClone()                     mut method capsule This capsuleClone()=(..)
    }
  @Public OVal={
    [HasToS]
    //class methods:
    #apply()                           class method mut This #apply()=(..)
    #apply(that)                       class method mut This #apply(fwd mut Value that)native{..}=(..)
    equals(a, b)                       class method Bool equals(read Value a, read Value b)=(..)
    //imm methods:
    #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
    #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
    //read methods:
    #bang0()                           read method Bool #bang0()=(..)
    #if()                              read method Bool #if()native{..}=(..)
    #in1(that)                         read method Bool #in1(read Value that)=(..)
    allEq(that)                        read method Bool allEq(read This that)=(..)
    contains(that)                     read method Bool contains(read Value that)=(..)
    isPresent()                        read method Bool isPresent()=(..)
    readEquality(that)                 read method Bool readEquality(read This that)=(..)
    toS()                              read method S toS()=(..)
    val()                              read method read Value val()native{..}=(..)
    val(orElse)                        read method read Value val(read Value orElse)=(..)
    //mut methods:
    #val()                             mut method mut Value #val()native{..}=(..)
    #val(orElse)                       mut method mut Value #val(mut Value orElse)=(..)
    }
  }
@Public String={
  [HasToS, Value]
  //class methods:
  #apply(string)                     class method This #apply(S string)=(..)
  #apply(that)                       class method This #apply(S that)=(..)
  #from(stringLiteral)               @Cache.Call class method This #from(S.StringBuilder stringLiteral)=(..)
  #immK(that)                        class method This #immK(S that)=(..)
  //imm methods:
  #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
  norm()                             method This norm()=(..)
  with(that)                         method This with(S that)=(..)
  //read methods:
  immClone()                         read method This immClone()=(..)
  readEquality(that)                 read method Bool readEquality(read This that)=(..)
  that()                             read method S that()=(..)
  toS()                              read method S toS()=(..)
  //mut methods:
  capsuleClone()                     mut method capsule This capsuleClone()=(..)
  }
@Public Value={
  interface[HasToS]
  toS()                              read method S toS()
  }
]]></pre>

        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>


