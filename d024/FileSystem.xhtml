<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="https://l42.is/css/style.css" media="all"/>
    <script src="https://l42.is/js/ace.js"></script>
    <script src="https://l42.is/js/utils.js"></script>
    <link rel="shortcut icon" href="https://l42.is/css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='https://l42.is/css/logoBlue.png' alt='42' width='120' height='120'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

<div class="index"><div class="wrapFloat"><div class="inFloat">
<div class="rotate90">Index of Content</div>
</div><div class="inFloat">
<ol>
 <li><a href="#FileSystem"> The File System module </a></li>

</ol>
</div></div><div class="finishFloat"></div></div>

</p><p id="FileSystem">
</p><div style="break-after:page"></div><h1> The File System module </h1> <p>
</p><h2> Importing process and example usage </h2> <p>

The File System module allows basic interactions with the file system
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Fs.Real.#$of(..)]]></span><it style="font-style: bold; color:green;">&#187;</it> creates a capability object connected with the real file system.
<pre class="l42Big"><![CDATA[
Fs = Load:{reuse[L42.is/FileSystem]}
..
Fs fs = Fs.Real.#$of()
S res = fs.read(Url"a/b.txt")
fs.write(on=Url"a/b.txt" content=res++res)
]]></pre>

</p><h2> Overview under AdamsTowel </h2> <p>
<pre class="l42BigFolded"><![CDATA[
interface
delete(that)                       mut method Void delete(Url that)[Fail]
makeDirs(that)                     mut method Void makeDirs(Url that)[Fail]
read(that)                         mut method S read(Url that)[Fail]
readBase64(that)                   mut method S readBase64(Url that)[Fail]
write(on, content)                 mut method Void write(Url on, S content)[Fail]
write(on, contentBase64)           mut method Void write(Url on, S contentBase64)[Fail]
Fail={
  [Message, HasToS, Message.Guard]
  //class methods:
  #apply(text, cause)                class method mut This #apply(S text, Message.OptMessage cause)
  #apply(that)                       class method mut This #apply(S that)=(..)
  #from(stringLiteral)               class method This #from(S.StringBuilder stringLiteral)=(..)
  //imm methods:
  #whoopsed(atPos)                   method This #whoopsed(Library atPos)=(..)
  with(cause)                        method This with(Message cause)=(..)
  //read methods:
  cause()                            read method Message.OptMessage cause()
  text()                             read method S text()
  toS()                              read method S toS()=(..)
  //mut methods:
  cause(that)                        mut method Void cause(Message.OptMessage that)
  text(that)                         mut method Void text(S that)
  }
Real={
  [This1]
  //class methods:
  #$of()                             @{
    Capability factory.  
    Creates an object connected with the real file system.
    }@Public class method mut This #$of()=(..)
  //mut methods:
  delete(that)                       @{
    Capability method.
    Deletes the file or directory denoted by the @Url 'that'.
    If it denotes a directory, then the directory must be empty in order to be deleted.
    }@Public mut method Void delete(Url that)[Fail]=(..)
  makeDirs(that)                     @{
    Capability method.
    Creates the directory named by the @Url 'that', 
    including any necessary but nonexistent parent directories.
    Note that if this operation fails it may have succeeded in
    creating some of the necessary parent directories.
    }@Public mut method Void makeDirs(Url that)[Fail]=(..)
  read(that)                         @{
    Capability method.
    Reads all the content from the @Url 'that' into the resulting string @S
    Any part of the input that is not directly representable as a character in @S
    is trimmed away.
    }@Public mut method S read(Url that)[Fail]=(..)
  readBase64(that)                   @{
    Capability method.
    Reads all the binary content from the @Url 'that' into the resulting string @S
    The content is encoded as Base64.
    }@Public mut method S readBase64(Url that)[Fail]=(..)
  write(on, content)                 @{
    Capability method.
    It opens the file for writing, creating the file if it doesn't exist,
    or initially truncating an existing regular-file to a size of 0.
    The full @S 'content' is wrote to the file.
    The method ensures that the file is closed after this operation is completed.
    If an error occurs it may do so after the file has been created or truncated,
    or after some bytes have been written to the file.
    }@Public mut method Void write(Url on, S content)[Fail]=(..)
  write(on, contentBase64)           @{
    Capability method.
    Similar to 'write(that content)', but it takes in input binary data 
    represented as a Base64 string, and writes them on the file in binary form. 
    }@Public mut method Void write(Url on, S contentBase64)[Fail]=(..)
  }
@{
  Url as for the WhatWG URL Standard, where relative urls are allowed
  In particular, if the provided url is relative,
  it is resolved against the current location.
  For example
  "https://google.com/bla/foo" is absolute so is left untouched
  "bla/foo" becomes something like "file:/C:/Users/--/Desktop/--/--/bla/foo"
      Note that "./bla/foo" would resolve exactly as "bla/foo"  
  "/C:/bla/foo" becomes "file:///C:/bla/foo"
      Note that "C:/bla/foo" would not be allowed.
  "/bla/foo" becomes "file:///bla/foo"; that is, starting from the root
  names with spaces or other special characters must be percent encoded, so for example 
  "myFolder/bla%20foo.txt" will point to the file "bla foo.txt" inside "myFolder".
  }
]]></pre>
        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>
