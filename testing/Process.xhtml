<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="https://l42.is/css/style.css" media="all"/>
    <script src="https://l42.is/js/ace.js"></script>
    <script src="https://l42.is/js/utils.js"></script>
    <link rel="shortcut icon" href="https://l42.is/css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='https://l42.is/css/logoBlue.png' alt='42' width='120' height='120'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

<div class="index"><div class="wrapFloat"><div class="inFloat">
<div class="rotate90">Index of Content</div>
</div><div class="inFloat">
<ol>
 <li><a href="#Process"> The process library </a></li>

</ol>
</div></div><div class="finishFloat"></div></div>

</p><p id="Process">
</p><div style="break-after:page"></div><h1> The process library </h1> <p>
</p><h2> Importing process and example usage </h2> <p>

The process library allows to run processes from AdamsTowel.
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Process.Real.#$of(..)]]></span><it style="font-style: bold; color:green;">&#187;</it> creates a capability object permanently connected with a specific
command and option, but the standard input of the program can be specified by the capability user.
<pre class="l42Big"><![CDATA[
Process = Load:{reuse[L42.is/Process]}
..
  (
  Process pLinux=Process.Real.#$of(\[S"ls";S"-l"])
  res=pLinux.start(input=S"")
  Debug(res.out())
  Debug(res.err())
  catch Process.Fail f Debug(S"oh no!")
  )
]]></pre>

</p><h2> Overview under AdamsTowel </h2> <p>
<pre class="l42BigFolded"><![CDATA[
interface
start(input)                       @{
  Capability method
  Starts the process with the provided input.
  It waits until the process is completed.
  returns a @Result.
  Note that a @Fail exception would raise if the process can not start,
  but if the process ends with errors (on the standard error stream),
  they would just be part of the result.
  }mut method Result start(S input)[Fail]
Fail={
  [Message, HasToS, Message.Guard]
  //class methods:
  #apply(text, cause)                class method mut This #apply(S text, Message.OptMessage cause)
  #apply(that)                       class method mut This #apply(S that)=(..)
  #from(stringLiteral)               class method This #from(S.StringBuilder stringLiteral)=(..)
  //imm methods:
  #whoopsed(atPos)                   method This #whoopsed(Library atPos)=(..)
  with(cause)                        method This with(Message cause)=(..)
  //read methods:
  cause()                            read method Message.OptMessage cause()
  text()                             read method S text()
  toS()                              read method S toS()=(..)
  //mut methods:
  cause(that)                        mut method Void cause(Message.OptMessage that)
  text(that)                         mut method Void text(S that)
  }
Real={
  [This1]
  //class methods:
  #$of(that)                         @{
    Capability factory
    Makes a @This capability object that can only run the provided process
    with the provided parameters    
    }@Public class method mut This #$of(S.List that)=(..)
  //read methods:
  that()                             @{
    The process ready to run
    }@Public read method S.List that()=(..)
  //mut methods:
  start(input)                       @{
    Capability method
    Starts the process with the provided input.
    It waits until the process is completed.
    returns a @Result.
    Note that a @Fail exception would raise if the process can not start,
    but if the process ends with errors (on the standard error stream),
    they would just be part of the result.
    }@Public mut method Result start(S input)[Fail]=(..)
  }
Result={
  [HasToS]
  //class methods:
  #apply(out, err)                   class method This #apply(fwd imm S out, fwd imm S err)=(..)
  #immK(out, err)                    class method This #immK(S out, S err)=(..)
  //imm methods:
  #bangequal0(that)                  method Bool #bangequal0(This that)=(..)
  #equalequal0(that)                 method Bool #equalequal0(This that)=(..)
  norm()                             method This norm()=(..)
  with(err)                          method This with(S err)=(..)
  with(out)                          method This with(S out)=(..)
  //read methods:
  err()                              @{
    the standard error of the process
    }read method S err()=(..)
  immClone()                         read method This immClone()=(..)
  out()                              @{
    the standard output of the process
    }read method S out()=(..)
  readEquality(that)                 read method Bool readEquality(read This that)=(..)
  toS()                              read method S toS()=(..)
  //mut methods:
  capsuleClone()                     mut method capsule This capsuleClone()=(..)
  }
]]></pre>
        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>


